// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DeployProxy extends ethereum.Event {
  get params(): DeployProxy__Params {
    return new DeployProxy__Params(this);
  }
}

export class DeployProxy__Params {
  _event: DeployProxy;

  constructor(event: DeployProxy) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get proxy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class InstallPlugin extends ethereum.Event {
  get params(): InstallPlugin__Params {
    return new InstallPlugin__Params(this);
  }
}

export class InstallPlugin__Params {
  _event: InstallPlugin;

  constructor(event: InstallPlugin) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proxy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get plugin(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get methods(): Array<Bytes> {
    return this._event.parameters[3].value.toBytesArray();
  }
}

export class SetPermission extends ethereum.Event {
  get params(): SetPermission__Params {
    return new SetPermission__Params(this);
  }
}

export class SetPermission__Params {
  _event: SetPermission;

  constructor(event: SetPermission) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proxy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get envoy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get target(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get permission(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class UninstallPlugin extends ethereum.Event {
  get params(): UninstallPlugin__Params {
    return new UninstallPlugin__Params(this);
  }
}

export class UninstallPlugin__Params {
  _event: UninstallPlugin;

  constructor(event: UninstallPlugin) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proxy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get plugin(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get methods(): Array<Bytes> {
    return this._event.parameters[3].value.toBytesArray();
  }
}

export class PRBProxyRegistry__constructorParamsResult {
  value0: Address;
  value1: Address;
  value2: Bytes;

  constructor(value0: Address, value1: Address, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getTarget(): Address {
    return this.value1;
  }

  getData(): Bytes {
    return this.value2;
  }
}

export class PRBProxyRegistry extends ethereum.SmartContract {
  static bind(address: Address): PRBProxyRegistry {
    return new PRBProxyRegistry("PRBProxyRegistry", address);
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  constructorParams(): PRBProxyRegistry__constructorParamsResult {
    let result = super.call(
      "constructorParams",
      "constructorParams():(address,address,bytes)",
      [],
    );

    return new PRBProxyRegistry__constructorParamsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBytes(),
    );
  }

  try_constructorParams(): ethereum.CallResult<PRBProxyRegistry__constructorParamsResult> {
    let result = super.tryCall(
      "constructorParams",
      "constructorParams():(address,address,bytes)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PRBProxyRegistry__constructorParamsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBytes(),
      ),
    );
  }

  deploy(): Address {
    let result = super.call("deploy", "deploy():(address)", []);

    return result[0].toAddress();
  }

  try_deploy(): ethereum.CallResult<Address> {
    let result = super.tryCall("deploy", "deploy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployAndExecute(target: Address, data: Bytes): Address {
    let result = super.call(
      "deployAndExecute",
      "deployAndExecute(address,bytes):(address)",
      [ethereum.Value.fromAddress(target), ethereum.Value.fromBytes(data)],
    );

    return result[0].toAddress();
  }

  try_deployAndExecute(
    target: Address,
    data: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployAndExecute",
      "deployAndExecute(address,bytes):(address)",
      [ethereum.Value.fromAddress(target), ethereum.Value.fromBytes(data)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployAndExecuteAndInstallPlugin(
    target: Address,
    data: Bytes,
    plugin: Address,
  ): Address {
    let result = super.call(
      "deployAndExecuteAndInstallPlugin",
      "deployAndExecuteAndInstallPlugin(address,bytes,address):(address)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromAddress(plugin),
      ],
    );

    return result[0].toAddress();
  }

  try_deployAndExecuteAndInstallPlugin(
    target: Address,
    data: Bytes,
    plugin: Address,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployAndExecuteAndInstallPlugin",
      "deployAndExecuteAndInstallPlugin(address,bytes,address):(address)",
      [
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromBytes(data),
        ethereum.Value.fromAddress(plugin),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployAndInstallPlugin(plugin: Address): Address {
    let result = super.call(
      "deployAndInstallPlugin",
      "deployAndInstallPlugin(address):(address)",
      [ethereum.Value.fromAddress(plugin)],
    );

    return result[0].toAddress();
  }

  try_deployAndInstallPlugin(plugin: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployAndInstallPlugin",
      "deployAndInstallPlugin(address):(address)",
      [ethereum.Value.fromAddress(plugin)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployFor(owner: Address): Address {
    let result = super.call("deployFor", "deployFor(address):(address)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toAddress();
  }

  try_deployFor(owner: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("deployFor", "deployFor(address):(address)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMethodsByOwner(owner: Address, plugin: Address): Array<Bytes> {
    let result = super.call(
      "getMethodsByOwner",
      "getMethodsByOwner(address,address):(bytes4[])",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(plugin)],
    );

    return result[0].toBytesArray();
  }

  try_getMethodsByOwner(
    owner: Address,
    plugin: Address,
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getMethodsByOwner",
      "getMethodsByOwner(address,address):(bytes4[])",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(plugin)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getMethodsByProxy(proxy: Address, plugin: Address): Array<Bytes> {
    let result = super.call(
      "getMethodsByProxy",
      "getMethodsByProxy(address,address):(bytes4[])",
      [ethereum.Value.fromAddress(proxy), ethereum.Value.fromAddress(plugin)],
    );

    return result[0].toBytesArray();
  }

  try_getMethodsByProxy(
    proxy: Address,
    plugin: Address,
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getMethodsByProxy",
      "getMethodsByProxy(address,address):(bytes4[])",
      [ethereum.Value.fromAddress(proxy), ethereum.Value.fromAddress(plugin)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getPermissionByOwner(
    owner: Address,
    envoy: Address,
    target: Address,
  ): boolean {
    let result = super.call(
      "getPermissionByOwner",
      "getPermissionByOwner(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(envoy),
        ethereum.Value.fromAddress(target),
      ],
    );

    return result[0].toBoolean();
  }

  try_getPermissionByOwner(
    owner: Address,
    envoy: Address,
    target: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getPermissionByOwner",
      "getPermissionByOwner(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(envoy),
        ethereum.Value.fromAddress(target),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getPermissionByProxy(
    proxy: Address,
    envoy: Address,
    target: Address,
  ): boolean {
    let result = super.call(
      "getPermissionByProxy",
      "getPermissionByProxy(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(proxy),
        ethereum.Value.fromAddress(envoy),
        ethereum.Value.fromAddress(target),
      ],
    );

    return result[0].toBoolean();
  }

  try_getPermissionByProxy(
    proxy: Address,
    envoy: Address,
    target: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getPermissionByProxy",
      "getPermissionByProxy(address,address,address):(bool)",
      [
        ethereum.Value.fromAddress(proxy),
        ethereum.Value.fromAddress(envoy),
        ethereum.Value.fromAddress(target),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getPluginByOwner(owner: Address, method: Bytes): Address {
    let result = super.call(
      "getPluginByOwner",
      "getPluginByOwner(address,bytes4):(address)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromFixedBytes(method),
      ],
    );

    return result[0].toAddress();
  }

  try_getPluginByOwner(
    owner: Address,
    method: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPluginByOwner",
      "getPluginByOwner(address,bytes4):(address)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromFixedBytes(method),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPluginByProxy(proxy: Address, method: Bytes): Address {
    let result = super.call(
      "getPluginByProxy",
      "getPluginByProxy(address,bytes4):(address)",
      [
        ethereum.Value.fromAddress(proxy),
        ethereum.Value.fromFixedBytes(method),
      ],
    );

    return result[0].toAddress();
  }

  try_getPluginByProxy(
    proxy: Address,
    method: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPluginByProxy",
      "getPluginByProxy(address,bytes4):(address)",
      [
        ethereum.Value.fromAddress(proxy),
        ethereum.Value.fromFixedBytes(method),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProxy(owner: Address): Address {
    let result = super.call("getProxy", "getProxy(address):(address)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toAddress();
  }

  try_getProxy(owner: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getProxy", "getProxy(address):(address)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployAndExecuteCall extends ethereum.Call {
  get inputs(): DeployAndExecuteCall__Inputs {
    return new DeployAndExecuteCall__Inputs(this);
  }

  get outputs(): DeployAndExecuteCall__Outputs {
    return new DeployAndExecuteCall__Outputs(this);
  }
}

export class DeployAndExecuteCall__Inputs {
  _call: DeployAndExecuteCall;

  constructor(call: DeployAndExecuteCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeployAndExecuteCall__Outputs {
  _call: DeployAndExecuteCall;

  constructor(call: DeployAndExecuteCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployAndExecuteAndInstallPluginCall extends ethereum.Call {
  get inputs(): DeployAndExecuteAndInstallPluginCall__Inputs {
    return new DeployAndExecuteAndInstallPluginCall__Inputs(this);
  }

  get outputs(): DeployAndExecuteAndInstallPluginCall__Outputs {
    return new DeployAndExecuteAndInstallPluginCall__Outputs(this);
  }
}

export class DeployAndExecuteAndInstallPluginCall__Inputs {
  _call: DeployAndExecuteAndInstallPluginCall;

  constructor(call: DeployAndExecuteAndInstallPluginCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get plugin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DeployAndExecuteAndInstallPluginCall__Outputs {
  _call: DeployAndExecuteAndInstallPluginCall;

  constructor(call: DeployAndExecuteAndInstallPluginCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployAndInstallPluginCall extends ethereum.Call {
  get inputs(): DeployAndInstallPluginCall__Inputs {
    return new DeployAndInstallPluginCall__Inputs(this);
  }

  get outputs(): DeployAndInstallPluginCall__Outputs {
    return new DeployAndInstallPluginCall__Outputs(this);
  }
}

export class DeployAndInstallPluginCall__Inputs {
  _call: DeployAndInstallPluginCall;

  constructor(call: DeployAndInstallPluginCall) {
    this._call = call;
  }

  get plugin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeployAndInstallPluginCall__Outputs {
  _call: DeployAndInstallPluginCall;

  constructor(call: DeployAndInstallPluginCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployForCall extends ethereum.Call {
  get inputs(): DeployForCall__Inputs {
    return new DeployForCall__Inputs(this);
  }

  get outputs(): DeployForCall__Outputs {
    return new DeployForCall__Outputs(this);
  }
}

export class DeployForCall__Inputs {
  _call: DeployForCall;

  constructor(call: DeployForCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeployForCall__Outputs {
  _call: DeployForCall;

  constructor(call: DeployForCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InstallPluginCall extends ethereum.Call {
  get inputs(): InstallPluginCall__Inputs {
    return new InstallPluginCall__Inputs(this);
  }

  get outputs(): InstallPluginCall__Outputs {
    return new InstallPluginCall__Outputs(this);
  }
}

export class InstallPluginCall__Inputs {
  _call: InstallPluginCall;

  constructor(call: InstallPluginCall) {
    this._call = call;
  }

  get plugin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InstallPluginCall__Outputs {
  _call: InstallPluginCall;

  constructor(call: InstallPluginCall) {
    this._call = call;
  }
}

export class SetPermissionCall extends ethereum.Call {
  get inputs(): SetPermissionCall__Inputs {
    return new SetPermissionCall__Inputs(this);
  }

  get outputs(): SetPermissionCall__Outputs {
    return new SetPermissionCall__Outputs(this);
  }
}

export class SetPermissionCall__Inputs {
  _call: SetPermissionCall;

  constructor(call: SetPermissionCall) {
    this._call = call;
  }

  get envoy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get target(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get permission(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetPermissionCall__Outputs {
  _call: SetPermissionCall;

  constructor(call: SetPermissionCall) {
    this._call = call;
  }
}

export class UninstallPluginCall extends ethereum.Call {
  get inputs(): UninstallPluginCall__Inputs {
    return new UninstallPluginCall__Inputs(this);
  }

  get outputs(): UninstallPluginCall__Outputs {
    return new UninstallPluginCall__Outputs(this);
  }
}

export class UninstallPluginCall__Inputs {
  _call: UninstallPluginCall;

  constructor(call: UninstallPluginCall) {
    this._call = call;
  }

  get plugin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UninstallPluginCall__Outputs {
  _call: UninstallPluginCall;

  constructor(call: UninstallPluginCall) {
    this._call = call;
  }
}
