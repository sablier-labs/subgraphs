"""
Entity for Merkle campaigns.
"""
type Campaign @entity(immutable: false) {
  # ------------------------------------ IDs ----------------------------------- #

  """
  Unique identifier: `{contractAddress}-{chainId}`
  """
  id: String!
  """
  The id of the chain, e.g., 137 for Polygon.
  """
  chainId: BigInt!
  """
  Unique global id as tracked by the subgraph watcher.
  """
  subgraphId: BigInt!

  # -------------------------------- Transaction ------------------------------- #

  """
  Hash of the Ethereum transaction that created this campaign.
  """
  hash: Bytes!

  """
  Unix timestamp of the Ethereum transaction that created this campaign.
  """
  timestamp: BigInt!

  # ---------------------------------- Actions --------------------------------- #

  """
  Actions triggered by this campaign.
  """
  actions: [Action!]! @derivedFrom(field: "campaign")

  """
  Action in which the admin clawed back funds from the campaign.
  """
  clawbackAction: Action

  # --------------------------------- Metadata --------------------------------- #
  """
  Type of campaign, e.g. Instant.
  """
  category: CampaignCategory!
  """
  User-provided name for the campaign, which is null in Airdrops v1.1.
  """
  name: String
  """
  Internal name generated by us, derived from `name` or generated from scratch in older versions.
  """
  nickname: String!

  # ---------------------------------- Merkle -------------------------------- #

  """
  List of daily activity snapshots for days in which at least one action was triggered.
  """
  activities: [Activity!]! @derivedFrom(field: "campaign")
  """
  Address of the campaign contract.
  """
  address: Bytes!
  """
  Address of the campaign admin, with permission to clawback.
  """
  admin: Bytes!
  """
  Total airdrop amount.
  """
  aggregateAmount: BigInt!
  """
  Underlying ERC-20 token distributed via the campaign.
  """
  asset: Asset!
  """
  Total amount claimed so far.
  """
  claimedAmount: BigInt!
  """
  Number of claims made so far.
  """
  claimedCount: BigInt!
  """
  Unix timestamp when the campaign underwent a clawback.
  """
  clawbackTime: BigInt
  """
  Unix timestamp when the campaign expires and clawback becomes available (if `expires` is true).
  """
  expiration: BigInt
  """
  Flag indicating if the campaign expires or is claimable indefinitely.
  """
  expires: Boolean!
  """
  The factory contract that deployed this campaign.
  """
  factory: Factory!
  """
  Minimum fee charged by this campaign, denominated in the native token of the chain, e.g., ETH for Ethereum Mainnet.
  Only available in v1.3 and later
  See https://docs.sablier.com/concepts/fees
  """
  fee: BigInt
  """
  IPFS content identifier for the list of recipients and other static details.
  """
  ipfsCID: String!
  """
  Index of the campaign based on the `campaignCounter` in the `Factory` entity.
  """
  position: BigInt!
  """
  Merkle root.
  """
  root: Bytes!
  """
  Total number of recipients.
  """
  totalRecipients: BigInt!
  """
  Version of the campaign contract, e.g., v1.3.
  """
  version: String!

  # ------------------------------- Lockup Config ------------------------------ #

  """
  Address of the Lockup contract through which streams are created.
  """
  lockup: Bytes

  """
  Flag indicating whether the claimed streams will be cancelable initially.
  """
  streamCancelable: Boolean
  """
  Flag indicating whether the claimed streams will have a cliff.
  Only available for Linear streams.
  """
  streamCliff: Boolean
  """
  The duration of the cliff that the stream will have, in seconds.
  Only available for Linear streams.
  """
  streamCliffDuration: BigInt
  """
  The amount that will unlock at the cliff of the claimed stream, expressed as a percentage of the total amount.
  Only available for Linear streams.
  """
  streamCliffPercentage: BigInt
  """
  Flag indicating whether the claimed stream will have an initial unlock.
  Only available for Linear streams.
  """
  streamInitial: Boolean
  """
  The initial unlock amount of the claimed stream, expressed as a percentage of the total.
  Only available for Linear streams.
  """
  streamInitialPercentage: BigInt
  """
  The shape of the distribution.
  """
  streamShape: String
  """
  Flag indicating if the claimed stream will have a preset start time or it will use the claim time as the start time.
  """
  streamStart: Boolean
  """
  Unix timestamp for the start time.
  """
  streamStartTime: BigInt
  """
  Snapshot of the duration in seconds for produced streams.
  """
  streamTotalDuration: BigInt
  """
  Tranches of the claimed stream.
  """
  streamTranches: [Tranche!]! @derivedFrom(field: "campaign")
  """
  Flag indicating whether the claimed streams will be transferable.
  """
  streamTransferable: Boolean
}
