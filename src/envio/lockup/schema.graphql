# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
"""
A generic entity for tracking protocol actions. There may be multiple actions for a single tx.
"""
type Action @entity(immutable: true) {
  """
  Unique identifier: `{txHash}-{blockLogIndex}`
  """
  id: String!
  """
  Unique global id as tracked by the `Watcher` entity.
  """
  subgraphId: BigInt!
  """
  Block number of the Ethereum transaction.
  """
  block: BigInt!
  """
  The id of the chain, e.g. 137 for Polygon.
  """
  chainId: BigInt!
  """
  The msg.sender of the Ethereum transaction.
  """
  from: Bytes!
  """
  Hash of the Ethereum transaction.
  """
  hash: Bytes!
  """
  Unix timestamp of the Ethereum transaction.
  """
  timestamp: BigInt!
  """
  Category of action, e.g., Deposit.
  """
  category: ActionCategory!
  """
  Contract through which the action was triggered.
  """
  contract: Bytes!
  """
  The Sablier fee paid in the native token of the chain, e.g., ETH for Ethereum Mainnet.
  See https://docs.sablier.com/concepts/fees
  """
  fee: BigInt
  """
  Stream linked to this action, if any.
  """
  stream: Stream
  """
  Address of 1st actor. Who this is depends upon the action type, e.g. for Create, it is the sender.
  """
  addressA: Bytes
  """
  Address of 2nd actor. Who this is depends upon the action type, e.g. for Transfer, it is the recipient.
  """
  addressB: Bytes
  """
  1st amount. What this is depends upon the action type, e.g. for Deposit, it is the deposit amount.
  """
  amountA: BigInt
  """
  2nd amount. What this is depends upon the action type, e.g. for Withdraw, it is the refund amount.
  """
  amountB: BigInt
}

"""
Creating streams in bulk is possible using the SablierBatchLockup contract.
See https://github.com/sablier-labs/lockup/blob/v2.0/src/SablierBatchLockup.sol

Note: the entity can be immutable because a batch is only updated in the same block.
See https://thegraph.com/docs/en/subgraphs/developing/creating/ql-schema/#defining-entities
"""
type Batch @entity(immutable: true) {
  """
  Unique identifier: `{chainId}-{txHash}-{batcher}`
  """
  id: String!
  """
  Hash of the Ethereum transaction that created this batch.
  """
  hash: Bytes
  """
  Timestamp of the transaction that created this batch.
  """
  timestamp: BigInt
  """
  The sender address that created this batch.
  """
  batcher: Batcher
  """
  Index of the batch based on the `batchCounter` in the `Batcher` entity.
  """
  position: BigInt
  """
  Number of streams part of this batch.
  """
  size: BigInt!
  """
  Streams part of this batch.
  """
  streams: [Stream!]! @derivedFrom(field: "batch")
}

"""
Sender address that created batches.
"""
type Batcher @entity(immutable: false) {
  """
  Unique identifier: `{chainId}-{sender}`
  """
  id: String!
  """
  Total number of batches started by this sender.
  """
  batchCounter: BigInt!
  """
  Batches started by this sender.
  """
  batches: [Batch!]! @derivedFrom(field: "batcher")
}

"""
See https://docs.sablier.com/concepts/lockup/segments
"""
type Segment @entity(immutable: true) {
  """
  Unique identifier: `{streamId}-{position}`
  """
  id: String!
  """
  Amount distributed by this segment.
  """
  amount: BigInt!
  """
  Total amount distributed at `endTime`. This is the sum of this segment's amount and all previous segments' amounts.
  """
  endAmount: BigInt!
  """
  Unix timestamp indicating the end of the segment.
  """
  endTime: BigInt!
  """
  Exponent used for the streamed amount calculations.
  See https://github.com/sablier-labs/lockup/blob/v2.0/src/types/DataTypes.sol#L279-L288
  """
  exponent: BigInt!
  """
  Position of the segment inside the array.
  """
  position: BigInt!
  """
  Total amount distributed by the stream at `startTime`. This is the sum of all previous segments' amounts.
  """
  startAmount: BigInt!
  """
  Unix timestamp indicating the start of the segment.
  This is also the end time of the previous segment or, if this is the first segment, it is the start time of the stream.
  """
  startTime: BigInt!
  """
  The stream in which this segment was created.
  """
  stream: Stream!
}

"""
See https://docs.sablier.com/concepts/lockup/tranches
"""
type Tranche @entity(immutable: true) {
  """
  Unique identifier: `{streamId}-{position}`
  """
  id: String!
  """
  Amount distributed by this tranche.
  """
  amount: BigInt!
  """
  Total amount distributed at `endTime`. This is the sum of this tranche's amount and all previous tranches' amounts.
  """
  endAmount: BigInt!
  """
  Unix timestamp indicating the end of the tranche.
  """
  endTime: BigInt!
  """
  Position of the tranche inside the array.
  """
  position: BigInt!
  """
  Total amount distributed by the stream at `startTime`. This is the sum of all previous tranches' amounts.
  """
  startAmount: BigInt!
  """
  Unix timestamp indicating the start of the tranche.
  This is also the end time of the previous tranche or, if this is the first tranche, it is the start time of the stream.
  """
  startTime: BigInt!
  """
  The stream in which this tranche was created.
  """
  stream: Stream!
}

enum ActionCategory {
  Approval
  ApprovalForAll
  Cancel
  Create
  Renounce
  Transfer
  Withdraw
}

enum StreamCategory {
  LockupDynamic
  LockupLinear
  LockupTranched
}

"""
ERC-20 asset
"""
type Asset @entity(immutable: true) {
  """
  Unique identifier: `{chainId}-{address}`
  """
  id: String!
  """
  Address of the ERC-20 token.
  """
  address: Bytes!
  """
  The id of the chain, e.g. 137 for Polygon.
  """
  chainId: BigInt!
  """
  Decimals of the ERC20 token.
  """
  decimals: BigInt!
  """
  Name of the ERC20 token.
  """
  name: String!
  """
  Symbol of the ERC20 token.
  """
  symbol: String!
  """
  Streams that rely on this token
  """
  streams: [Stream!]! @derivedFrom(field: "asset")
}

type Watcher @entity(immutable: false) {
  """
  The chain ID. There is one watcher per subgraph.
  """
  id: String!
  """
  Global counter for actions.
  """
  actionCounter: BigInt!
  """
  Alias for id.
  """
  chainId: BigInt!
  """
  Used for debugging purposes. They are normally empty.
  """
  logs: [String!]
  """
  Global counter.
  """
  streamCounter: BigInt!
}

type Stream @entity(immutable: false) {
  """
  Unique identifier: `{contractAddress}-{chainId}-{tokenId}`
  """
  id: String!
  """
  Like the id: `{contractAlias}-{chainId}-{tokenId}`
  """
  alias: String!
  """
  The id of the chain, e.g., 137 for Polygon.
  """
  chainId: BigInt!
  """
  Unique global id as tracked by the `Watcher` entity.
  ðŸš¨ This may change if new data sources are added and the chronological order of streams changes.
  """
  subgraphId: BigInt!
  """
  The id provided by the Lockup contract. This is the ERC-721 tokenId.
  """
  tokenId: BigInt!
  """
  Hash of the Ethereum transaction that created this stream.
  """
  hash: Bytes!
  """
  Unix timestamp of the Ethereum transaction that created this stream.
  """
  timestamp: BigInt!
  """
  Actions triggered by this stream.
  """
  actions: [Action!]! @derivedFrom(field: "stream")
  """
  ERC-20 token distributed via this stream.
  """
  asset: Asset!
  """
  ERC-20 token decimals. Stored here to avoid loading the asset entity on each stream.
  Note: the "Value" suffix is added because of a bug in GraphQL Code Generator.
  """
  assetDecimalsValue: BigInt!
  """
  The batch the stream may be part of.
  Note: this is available only when created within a batch create transaction.
  """
  batch: Batch!
  """
  Category used for sorting.
  """
  category: StreamCategory!
  """
  The contract the stream originates from.
  """
  contract: Bytes!
  """
  Position in the batch, if available.
  """
  position: BigInt!
  """
  Current recipient of the stream, with permission to withdraw funds to any third-party address.
  Note: the recipient can change on NFT transfer.
  """
  recipient: Bytes!
  """
  Manager of the stream, with ability to cancel the stream.
  """
  sender: Bytes!
  """
  Unix timestamp for the start of the stream.
  """
  startTime: BigInt!
  """
  Flag indicating the transferability of the stream. This is set when the stream is created, and cannot
  be changed later.
  """
  transferable: Boolean!
  """
  Version of contract, e.g., v1.0.
  """
  version: String!
  """
  The sum of all withdrawn amounts.
  """
  withdrawnAmount: BigInt!
  """
  Action in which the stream was canceled.
  """
  canceledAction: Action
  """
  Action in which the stream was made non-cancelable.
  Note: if the stream was made non-cancelable from the get-go, this is the same as the Create action.
  """
  renounceAction: Action
  """
  Flag indicating the cancelability of the stream.
  """
  cancelable: Boolean!
  """
  Flag indicating if the stream was canceled.
  """
  canceled: Boolean!
  """
  Unix timestamp for the when the stream was canceled.
  """
  canceledTime: BigInt
  """
  The amount deposited when the stream was created.
  """
  depositAmount: BigInt!
  """
  Snapshot of the duration in seconds (the difference between end and start time).
  """
  duration: BigInt!
  """
  Unix timestamp for the end of the stream.
  """
  endTime: BigInt!
  """
  The account that funded the stream, which can be different from the sender.
  """
  funder: Bytes!
  """
  The amount that is still held by the stream regardless of whether if was fully vested or not.
  This is the difference between the deposit amount and all withdrawn amounts.
  """
  intactAmount: BigInt!
  """
  Users associated with the stream: recipient, sender, possibly the sender's proxy.
  """
  parties: [Bytes!]!
  """
  Owner of the proxy when the stream is created through a PRBProxy (https://github.com/PaulRBerg/prb-proxy)
  Note that proxy = stream sender, and proxender = owner of proxy
  """
  proxender: Bytes
  """
  Flag for streams created through a PRBProxy.
  """
  proxied: Boolean!
  """
  Unix timestamp for when the stream was made non-cancelable. This can coincide with the create time.
  """
  renounceTime: BigInt
  """
  An optional parameter to specify the shape of the distribution.
  Available since Lockup v2.0.
  """
  shape: String
  """
  Flag for Linear streams with a cliff.
  """
  cliff: Boolean
  """
  The amount that will unlock at the cliff time.
  """
  cliffAmount: BigInt
  """
  Unix timestamp for the start of the cliff.
  """
  cliffTime: BigInt
  """
  Flag for Linear stream with an initial unlock.
  Available since Lockup v2.0.
  """
  initial: Boolean
  """
  The initial unlock amount of a Linear stream.
  Available since Lockup v2.0.
  """
  initialAmount: BigInt
  """
  Segments of a Dynamic stream.
  """
  segments: [Segment!]! @derivedFrom(field: "stream")
  """
  Segments of a Tranched stream.
  """
  tranches: [Tranche!]! @derivedFrom(field: "stream")
}
