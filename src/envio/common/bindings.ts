import type { t as Address_t } from "envio/src/Address.gen";
import type { logger } from "envio/src/Envio.gen";
import type { genericEvent as Internal_genericEvent } from "envio/src/Internal.gen";
import { type Enum as FlowEnum } from "../flow/bindings";
import { type Enum as LockupEnum } from "../lockup/bindings";

/**
 * These bindings were copy-pasted from the bindings directory generated by Envio. They may have to be updated
 * to match the latest GraphQL schema.
 */
export namespace Common {
  export type Asset = {
    readonly address: string;
    readonly chainId: bigint;
    readonly decimals: bigint;
    readonly id: string;
    readonly name: string;
    readonly symbol: string;
  };

  export type StreamAction = {
    readonly addressA: undefined | string;
    readonly addressB: undefined | string;
    readonly amountA: undefined | bigint;
    readonly amountB: undefined | bigint;
    readonly block: bigint;
    readonly category: FlowEnum.ActionCategory | LockupEnum.ActionCategory;
    readonly chainId: bigint;
    readonly contract: string;
    readonly fee: undefined | bigint;
    readonly from: string;
    readonly hash: string;
    readonly id: string;
    readonly stream_id: undefined | string;
    readonly subgraphId: bigint;
    readonly timestamp: bigint;
  };

  export type StreamWatcher = {
    readonly actionCounter: bigint;
    readonly chainId: bigint;
    readonly id: string;
    readonly logs: undefined | string[];
    readonly streamCounter: bigint;
  };
}

/**
 * Generic bindings hard-coded here because Envio doesn't export them.
 * @see https://github.com/enviodev/hyperindex/issues/532
 */
export namespace Envio {
  export type Address = Address_t;

  export type AggregatedBlock_t = {
    readonly timestamp: number;
    readonly hash: string;
    readonly number: number;
  };

  export type AggregatedTransaction_t = {
    readonly to: undefined | Address_t;
    readonly hash: string;
    readonly transactionIndex: number;
    readonly value: bigint;
    readonly from: undefined | Address_t;
  };

  export type Block_t = {
    readonly number: number;
    readonly timestamp: number;
    readonly hash: string;
  };

  export type eventLog<params> = Internal_genericEvent<params, Block_t, Transaction_t>;
  export type EventLog<params> = eventLog<params>;
  export type Event<Params extends object = Record<string, unknown>> = EventLog<Params>;

  export type Logger = logger;

  export type Transaction_t = {
    readonly from: undefined | Address_t;
    readonly hash: string;
    readonly to: undefined | Address_t;
    readonly transactionIndex: number;
    readonly value: bigint;
  };
}
